openapi: 3.0.3
info:
  title: Restaurant API
  description: API for managing Restaurant
  version: 1.0.0
  contact:
    email: tsilavina.3@mail.hei.school

servers:
  - url: https://api.restaurant/TD4
    description: Production server
  - url: http://localhost:8080/TD4
    description: Local development server

paths:
  /ingredients:
    get:
      tags: [Ingredients]
      summary: List ingredients with filtering and pagination
      parameters:
        - $ref: '#/components/parameters/priceMinFilter'
        - $ref: '#/components/parameters/priceMaxFilter'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          description: Paginated ingredient list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIngredients'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags: [Ingredients]
      summary: Create new ingredients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IngredientCreate'
      responses:
        '201':
          description: Ingredients created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /ingredients/{ingredientId}:
    get:
      tags: [Ingredients]
      summary: Get ingredient details
      parameters:
        - $ref: '#/components/parameters/ingredientId'
      responses:
        '200':
          description: Ingredient details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /ingredients/{ingredientId}/prices:
    put:
      tags: [Prices]
      summary: Update ingredient prices
      parameters:
        - $ref: '#/components/parameters/ingredientId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PriceUpdate'
      responses:
        '200':
          description: Prices updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /ingredients/{ingredientId}/stock-movements:
    put:
      tags: [Stock]
      summary: Update stock movements
      parameters:
        - $ref: '#/components/parameters/ingredientId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StockMovementUpdate'
      responses:
        '200':
          description: Stock movements updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockMovement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    # Core Models
    Ingredient:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "Saucisse"
        actualPrice:
          type: number
          format: double
          example: 20.0
        availableQuantity:
          type: number
          format: double
          example: 10000.0
        prices:
          type: array
          items:
            $ref: '#/components/schemas/Price'
        stockMovements:
          type: array
          items:
            $ref: '#/components/schemas/StockMovement'
      required: [id, name, actualPrice, availableQuantity]

    Price:
      type: object
      properties:
        id:
          type: string
          nullable: true
          example: null
        price:
          type: number
          format: double
          example: 20.0
        dateValue:
          type: string
          format: date
          example: "2025-01-01"
      required: [price, dateValue]

    StockMovement:
      type: object
      properties:
        id:
          type: string
          example: "1"
        quantity:
          type: number
          format: double
          example: 10000.0
        unit:
          type: string
          enum: [G, L, U]
          example: G
        type:
          type: string
          enum: [IN, OUT]
          example: IN
        creationDatetime:
          type: string
          format: date-time
          example: "2025-02-01T05:00:00Z"
      required: [id, quantity, unit, type, creationDatetime]

    # Input Models
    IngredientCreate:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "New Ingredient"
      required: [name]

    PriceUpdate:
      type: object
      properties:
        price:
          type: number
          format: double
          example: 25.0
        dateValue:
          type: string
          format: date
          example: "2025-01-02"
      required: [price, dateValue]

    StockMovementUpdate:
      type: object
      properties:
        id:
          type: string
          example: "1"
        quantity:
          type: number
          format: double
          example: 500.0
        unit:
          type: string
          enum: [G, L, U]
          example: G
        type:
          type: string
          enum: [IN, OUT]
          example: IN
      required: [quantity, unit, type]

    # Response Wrappers
    PaginatedIngredients:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 5
        totalPages:
          type: integer
          example: 1

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2025-02-01T10:00:00Z"
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Invalid price filter range"
        path:
          type: string
          example: "/v1/ingredients"

  parameters:
    ingredientId:
      name: ingredientId
      in: path
      required: true
      schema:
        type: string
      description: Ingredient identifier
      example: "1"

    priceMinFilter:
      name: priceMinFilter
      in: query
      required: false
      schema:
        type: number
        format: double
        minimum: 0
      description: Minimum price filter (inclusive)
      example: 10.0

    priceMaxFilter:
      name: priceMaxFilter
      in: query
      required: false
      schema:
        type: number
        format: double
        minimum: 0
      description: Maximum price filter (inclusive)
      example: 1000.0

    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
      description: Page number (0-indexed)
      example: 0

    size:
      name: size
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
      description: Items per page
      example: 10

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
